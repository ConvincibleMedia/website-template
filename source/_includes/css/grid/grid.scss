/* INCLUDE: _includes/css/grid.scss */

{% include css/config.scss %}
{% include css/helpers.scss %}


/* GRID FOUNDATIONS */

.container {
	margin: 0 auto;
	padding: 0 ($grid-spacing / 2);
	max-width: 100%;

	@media #{break('md')} {
		padding: 0 $grid-spacing;
		width: 90%;
	}

	@media #{break('lg')} {
		width: 80%;
	}

	//outline: 1px solid green;
}


/* GRID ELEMENT */

.grid, .across, .down {
	display: flex;
	flex-wrap: wrap;
	overflow: auto; // In case required; or for nowrap grids
	justify-content: $grid-align;
	align-items: stretch; // cells fill vertical space relative to other cells
	align-content: stretch; // rows fill vertical space between rows
	margin: ($grid-spacing / 2) (0 - ($grid-spacing / 2));

	//outline: 1px solid red;
}
.grid, .across { flex-direction: row; }
.down { flex-direction: column; }


/* CELL ELEMENTS */

@mixin grid-cell-size-properties($width) {
	flex-basis: $width;
	max-width: $width;
}

.cell, .cell-flex, .cell-auto {
	flex-grow: 1; // Hanging cells will expand to fill full space
	flex-shrink: 1; // Cells can become smaller on smaller screens
	flex-basis: 100%;
	max-width: 100%;
	overflow: auto;
	margin: 0;
	padding: $grid-spacing / 2;

	& :last-child {
		margin-bottom: 0;
	}

	& > .card {
		height: 100%;
	}

	outline: 1px dashed rgba(green, 0.5);
}

.cell-auto {
	@media #{break('sm')} {
		@include grid-cell-size-properties(100% / 2);
	}

	@media #{break('md')} {
		@include grid-cell-size-properties(100% / 3);
	}

	@media #{break('lg')} {
		@include grid-cell-size-properties(100% / 4);
	}
}

.cell-flex {
	min-width: $font-size * 10; // Avoid stupidly squashed cells
	flex-basis: auto;
}

.card {
	padding: $grid-spacing / 2;
}


/* CELL ORDERING */

.flex-first,
.flex-first-1 { order: -100000; } // First
.flex-first-2 { order: -020000; } // After first-1
.flex-first-3 { order: -003000; } // After first-1 or first-2
.flex-last,
.flex-last-1  { order:  100000; } // Last
.flex-last-2  { order:  020000; } // Before last-1
.flex-last-3  { order:  003000; } // Before last-2 or last-1


/* RESPONSIVE EXPLICIT SIZES */

@each $break, $size in $grid-breaks {
	@media (min-width: $size) {
		@each $cols in $grid-sizes {
			@for $col from 1 through ($cols - 1) { // No '4in4' classes etc.

				$percent: percentage($col / $cols);
				.#{$break}-#{$col}in#{$cols} {
					@include grid-cell-size-properties($percent);
				}

			}
		}
	}
}


/* RESPONSIVE HIDE/SHOW */

@each $break, $size in $grid-breaks {
	.#{$break}-visible { display: none; }

	@media (min-width: $size) {
		.#{$break}-hidden { display: none; }
		.#{$break}-visible { display: initial; }
	}
}
