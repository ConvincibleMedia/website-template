/* INCLUDE: _includes/css/grid.scss */

{% include css/config.scss %}
{% include css/helpers.scss %}

$debug: false;


/* GRID FOUNDATIONS */

.container {
	margin: 0 auto;
	padding: 0 $grid-spacing / 2;
	max-width: 100%;

	@media #{break('md')} {
		padding: 0 $grid-spacing;
	}

	@media #{break('lg')} {
		width: 90%;
	}

	@media #{break('xl')} {
		width: 80%;
	}

	@media (min-width: #{map-get($grid-breaks, 'xl') * 1.5}) { // Stop width expanding forever
		width: map-get($grid-breaks, 'xl') * 1.5 * 0.8;
	}

	@if $debug { outline: 1px dashed rgba(blue, 0.5); }
}


/* GRID ELEMENT */

.lines {
	display: flex; // If not understood by browser, will stay as block
	flex-wrap: wrap;
	flex-direction: row;
	overflow: auto; // In case required; or for nowrap grids
	justify-content: $grid-align;
	align-items: stretch; // cells fill vertical space relative to other cells
	align-content: stretch; // rows fill vertical space between rows
	padding: 0; // Grid containers don't pad
	margin: 0 (0 - ($grid-spacing / 2)); // Grids overflow containers so insides line up after padding

	@if $debug { outline: 1px dashed rgba(red, 0.5); }
}


/* CELL ELEMENTS */

@mixin grid-cell-size-properties($width) {
	flex-basis: $width;
	max-width: $width;
}

.cell {
	display: block;
	max-width: 100%;
	overflow: auto;
	@if $debug { outline: 1px dashed rgba(green, 0.5); }

	& :last-child {
		margin-bottom: 0;
	}
}

.lines > .cell {
	flex-grow: 1; // Hanging cells will expand to fill full space
	flex-shrink: 1; // Cells can become smaller on smaller screens
	flex-basis: 100%;
	padding: ($grid-spacing / 2);
}

.cell-auto {
	@media #{break('sm')} {
		@include grid-cell-size-properties(100% / 2);
	}

	@media #{break('md')} {
		@include grid-cell-size-properties(100% / 3);
	}

	@media #{break('lg')} {
		@include grid-cell-size-properties(100% / 4);
	}
}

.cell-flex {
	min-width: $font-size * 10; // Avoid stupidly squashed cells
	flex-basis: auto;
}

.cell-container { padding-top: 0!important; padding-bottom: 0!important }

/* CARDS */

/*.cards {
	margin-top: $grid-spacing / 4;
	margin-bottom: $grid-spacing / 4;

	& > .cell, & > .cell-flex, & > .cell-auto {
		padding-top: $grid-spacing / 4;
		padding-bottom: $grid-spacing / 4;
	}

	@media #{break('md')} {
		margin-top: $grid-spacing / 2;
		margin-bottom: $grid-spacing / 2;

		& > .cell, & > .cell-flex, & > .cell-auto {
			padding-top: $grid-spacing / 2;
			padding-bottom: $grid-spacing / 2;
		}
	}
}*/

.card, .card-inner {
	height: 100%;

	@if $debug { outline: 1px dashed rgba(purple, 0.5); }
}
.card-inner {
	padding: $grid-spacing / 2;
}


/* CELL ORDERING */
// .item- prefix used for moving cells around

.item-first,
.item-first-1 { order: -100000; } // First
.item-first-2 { order: -020000; } // After first-1
.item-first-3 { order: -003000; } // After first-1 or first-2
.item-last,
.item-last-1  { order:  100000; } // Last
.item-last-2  { order:  020000; } // Before last-1
.item-last-3  { order:  003000; } // Before last-2 or last-1


/* RESPONSIVE EXPLICIT SIZES */

@each $break, $size in $grid-breaks {
	@media (min-width: $size) {
		@each $cols in $grid-sizes {
			@for $col from 1 through ($cols - 1) { // No '4in4' classes etc.
				$percent: percentage($col / $cols);
				.#{$break}-#{$col}in#{$cols} {
					@include grid-cell-size-properties($percent);
				}
			}
		}
	}
}


/* GRID */

.media {
	display: grid;
	justify-content: stretch;
	justify-items: stretch;
	align-content: stretch;
	margin: 0 (0 - ($grid-spacing / 2));
}


.media .cell {
	padding: 0 ($grid-spacing / 2);
}


/* GRID: MEDIA OBJECTS */

.media {
	grid-template-columns: 1fr;
	grid-template-rows: min-content min-content 1fr;
	grid-row-gap: $grid-spacing / 4;
	grid-template-areas:
		"img"
		"h"
		"body";
}

@mixin media-left() {
	grid-template-columns: 1fr 3fr;
	grid-template-rows: min-content 1fr;
	grid-template-areas:
		"img h"
		"img body";
}

@each $break, $size in $grid-breaks {
	.#{$break}-media-left {
		@media #{break($break)} {
			@include media-left();
		}
	}
}

// Placement
.media-img { grid-area: img; }
.media-h { grid-area: h; }
.media-body { grid-area: body; }

// Extra styling
.media-img {
	overflow: hidden;
	img {
		display: block;
		width: 100%;
	}
}

// Inside cards
.card > .media {
	height: 100%;

	//.media-img { padding: 0 ($grid-spacing / 2) }
	.media-h, .media-body { padding: 0 ($grid-spacing); }
	.media-body { padding-bottom: $grid-spacing / 2; }
}

@mixin media-left-card() {
	.media-h, .media-body { padding: 0 ($grid-spacing) 0 ($grid-spacing / 2); }
	.media-h { padding-top: $grid-spacing / 2; }
	.media-body { padding-bottom: $grid-spacing / 2; }
	.media-img {
		padding-right: 0; margin-right: $grid-spacing / 2;

		img {
			min-width: 100%; max-width: none;
			min-height: 100%;
			width: auto;
			height: auto;
		}
	}
}

@each $break, $size in $grid-breaks {
	.card > .#{$break}-media-left {
		@media #{break($break)} {
			@include media-left-card();
		}
	}
}

.card-inner .media {
	margin: 0 (0 - ($grid-spacing));

	.media-img, .media-h, .media-body { padding-left: $grid-spacing; padding-right: $grid-spacing; }
}

@mixin media-left-card-inner() {
	.media-img { padding-right: $grid-spacing / 2; }
	.media-h, .media-body { padding-left: $grid-spacing / 2; }
}

@each $break, $size in $grid-breaks {
	.card-inner .#{$break}-media-left {
		@media #{break($break)} {
			@include media-left-card-inner();
		}
	}
}

/* RESPONSIVE HIDE/SHOW */

@each $break, $size in $grid-breaks {
	.#{$break}-visible { display: none; }

	@media (min-width: $size) {
		.#{$break}-hidden { display: none; }
		.#{$break}-visible { display: initial; }
	}
}
